# def se_test(wav_dir, noise_dir, snr, noise_type=1):
# 
#     # clean_speech, clean_fs = librosa.load(wav_dir, config.fs)
#     clean_speech = utils.read_raw(wav_dir)
#     eng = matlab.engine.start_matlab()
# 
#     # noisy_speech = np.array(eng.noise_add(wav_dir, noise_dir, noise_type, snr, nargout=1))
#     # noisy_speech, noisy_fs = librosa.load(noise_dir, config.fs)
#     noisy_speech = utils.read_raw(noise_dir)
# 
#     # noisy_measure = se_eval(clean_speech, np.squeeze(noisy_speech), float(config.fs))
# 
#     temp_dir = './data/test/temp/temp.npy'
# 
#     np.save(temp_dir, noisy_speech)
#     graph_name = sorted(glob.glob('./saved_model/*.pb'))[-1]
#     graph = gt.load_graph(graph_name)
#     norm_path = os.path.abspath('./data/train/norm')
# 
#     test_dr = dr.DataReader(temp_dir, '', norm_path, dist_num=config.dist_num, is_training=False, is_shuffle=False)
# 
#     node_inputs = graph.get_tensor_by_name('prefix/model_1/inputs:0')
#     node_labels = graph.get_tensor_by_name('prefix/model_1/labels:0')
#     node_keep_prob = graph.get_tensor_by_name('prefix/model_1/keep_prob:0')
#     node_prediction = graph.get_tensor_by_name('prefix/model_1/pred:0')
# 
#     pred = []
#     lab = []
# 
#     while True:
# 
#         test_inputs, test_labels = test_dr.next_batch(config.test_batch_size)
# 
#         feed_dict = {node_inputs: test_inputs, node_labels: test_labels, node_keep_prob: 1.0}
# 
#         sess_config = tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)
#         sess_config.gpu_options.allow_growth = True
# 
#         with tf.Session(graph=graph, config=sess_config) as sess:
#             pred_temp, lab_temp = sess.run([node_prediction, node_labels], feed_dict=feed_dict)
# 
#         pred.append(pred_temp)
#         lab.append(lab_temp)
# 
#         if test_dr.file_change_checker():
#             phase = test_dr.phase[0]
# 
#             lpsd = np.expand_dims(np.reshape(np.concatenate(pred, axis=0), [-1, config.freq_size])[0:phase.shape[0], :], axis=2)
# 
#             mean, std = test_dr.norm_process(norm_path + '/norm_noisy.mat')
# 
#             lpsd = np.squeeze((lpsd * std) + mean)  # denorm
# 
#             recon_speech = utils.get_recon(np.transpose(lpsd, (1, 0)), np.transpose(phase, (1, 0)),
#                                            win_size=config.win_size, win_step=config.win_step, fs=config.fs)
# 
#             # plt.plot(recon_speech)
#             # plt.show()
#             # lab = np.reshape(np.asarray(lab), [-1, 1])
#             test_dr.reader_initialize()
#             break
# 
#     # os.popen('rm -rf ' + temp_dir)
# 
#     noisy_measure = utils.se_eval(clean_speech[0:recon_speech.shape[0]], np.squeeze(noisy_speech[0:recon_speech.shape[0]]), float(config.fs))
# 
#     enhanced_measure = utils.se_eval(clean_speech[0:recon_speech.shape[0]], recon_speech, float(config.fs))
#     print("pesq: %.4f -> %.4f" % (noisy_measure["pesq"], enhanced_measure["pesq"]))
#     print("lsd: %.4f -> %.4f" % (noisy_measure["lsd"], enhanced_measure["lsd"]))
#     print("stoi: %.4f -> %.4f" % (noisy_measure["stoi"], enhanced_measure["stoi"]))
#     print("ssnr: %.4f -> %.4f" % (noisy_measure["ssnr"], enhanced_measure["ssnr"]))
# 
#     plt.subplot(3, 1, 1)
#     S = librosa.amplitude_to_db(librosa.stft(clean_speech[0:recon_speech.shape[0]], hop_length=config.win_step,
#                                              win_length=config.win_size, n_fft=config.nfft), ref=np.max)
#     ld.specshow(S, y_axis='linear', hop_length=config.win_step, sr=config.fs)
# 
#     plt.subplot(3, 1, 2)
#     S = librosa.amplitude_to_db(librosa.stft(np.squeeze(noisy_speech[0:recon_speech.shape[0]]), hop_length=config.win_step,
#                                              win_length=config.win_size, n_fft=config.nfft), ref=np.max)
#     ld.specshow(S, y_axis='linear', hop_length=config.win_step, sr=config.fs)
# 
#     plt.subplot(3, 1, 3)
#     S = librosa.amplitude_to_db(librosa.stft(recon_speech, hop_length=config.win_step,
#                                              win_length=config.win_size, n_fft=config.nfft), ref=np.max)
#     ld.specshow(S, y_axis='linear', hop_length=config.win_step, sr=config.fs)
# 
#     plt.show()
# 
#     return recon_speech
